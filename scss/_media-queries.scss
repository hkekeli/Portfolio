$xlg-screen:'screen and (min-width: 100rem)';
$lg-screen: 'screen and (min-width: 70rem)';
$md-screen: 'screen and (min-width: 40rem)';
$sm-screen: 'screen and (min-width: 30rem)';

//$lg-screen: 70rem;
//$md-screen: 768px;
//$sm-screen: 30rem;
//
//
//$mq-sm: 'screen and (min-width: #{$sm-screen})';
//$mq-md: 'screen and (min-width: #{$md-screen})';
//$mq-lg: 'screen and (min-width: #{$lg-screen})';
//
//// Example Use
//// ===========
////
//// mq variables will need to be interpolated like so:
////
//// @media #{$mq-sm} {
////   div {
////     color: red;
////   }
//// }
//
//
//$layout-bps: (
//    sm: $mq-sm,
//    md: $mq-md,
//    lg: $mq-lg
//);
//
//// This function check if the screen responds to the proper size
//// @param $breakpoint this parameter accept s, m, l, xl values.
//@mixin respond-to($breakpoint) {
//
//    @if $breakpoint == s {
//        @media (max-width: #{$sm-screen - .01}) {
//            @content;
//        }
//    }
//
//    @else if $breakpoint == m {
//        // respond to medium and small
//        @media (min-width: #{$sm-screen}) and (max-width: #{$md-screen - .01}) {
//            @content;
//        }
//    }
//
//    @else if $breakpoint == l {
//        // respond to medium and bigweb
//        @media (min-width: #{$md-screen}) and (max-width: #{$lg-screen - .01}) {
//            @content;
//        }
//    }
//
//    @else if $breakpoint == xl {
//        // respond to medium and bigweb
//        @media (min-width: #{$lg-screen}) {
//            @content;
//        }
//    }
//}
//
//@mixin respond-to-multiple($breakpoints...) {
//    @each $item in $breakpoints {
//        @if $item != null {
//            @include respond-to($item) {
//                @content;
//            }
//        }
//    }
//}
